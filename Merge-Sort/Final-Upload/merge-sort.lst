     1                                  	      ;; Program to sort elements of an array using merge sort.
     2                                  	      ;; The original array is modified.
     3                                  	      ;; [2012-08-09 Thu]
     4                                  	      ;; Author - S Pradeep Kumar
     5                                  
     6                                  	      %include "io.mac"
     7                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     8                              <1> extern   proc_GetStr, proc_GetCh
     9                              <1> extern   proc_PutInt, proc_GetInt
    10                              <1> extern   proc_PutLInt, proc_GetLInt
    11                              <1> 
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> %macro  .STARTUP  0
    14                              <1> ;group dgroup .data .bss
    15                              <1>         global   _start
    16                              <1> _start:
    17                              <1> %endmacro
    18                              <1> ;;-------------------------------------------------------------------
    19                              <1> 
    20                              <1> 
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> %macro  .EXIT  0
    23                              <1>         mov    EAX,1
    24                              <1>         xor    EBX,EBX
    25                              <1>         int    0x80
    26                              <1> %endmacro
    27                              <1> ;;-------------------------------------------------------------------
    28                              <1> 
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .DATA 0
    32                              <1>         segment .data
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .UDATA 0
    38                              <1>         segment .bss
    39                              <1> %endmacro
    40                              <1> ;;-------------------------------------------------------------------
    41                              <1> 
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> %macro  .CODE 0
    44                              <1>         segment .data
    45                              <1>         segment .bss
    46                              <1>         segment .text
    47                              <1> %endmacro
    48                              <1> ;;-------------------------------------------------------------------
    49                              <1> 
    50                              <1> 
    51                              <1> ;;-------------------------------------------------------------------
    52                              <1> %macro  nwln  0 
    53                              <1>         call    proc_nwln
    54                              <1> %endmacro
    55                              <1> ;;-------------------------------------------------------------------
    56                              <1> 
    57                              <1> 
    58                              <1> ;;-------------------------------------------------------------------
    59                              <1> %macro  PutCh  1 
    60                              <1>         push    AX
    61                              <1>         mov     AL,%1
    62                              <1>         call    proc_PutCh
    63                              <1>         pop     AX
    64                              <1> %endmacro
    65                              <1> ;;-------------------------------------------------------------------
    66                              <1> 
    67                              <1> 
    68                              <1> ;;-------------------------------------------------------------------
    69                              <1> %macro  PutStr  1 
    70                              <1>         push    ECX
    71                              <1>         mov     ECX,%1
    72                              <1>         call    proc_PutStr
    73                              <1>         pop     ECX
    74                              <1> %endmacro
    75                              <1> ;;-------------------------------------------------------------------
    76                              <1> 
    77                              <1> 
    78                              <1> ;;-------------------------------------------------------------------
    79                              <1> %macro  GetStr  1-2 81
    80                              <1>         push    ESI
    81                              <1>         push    EDI
    82                              <1>         mov     EDI,%1
    83                              <1>         mov     ESI,%2
    84                              <1>         call    proc_GetStr
    85                              <1>         pop     EDI
    86                              <1>         pop     ESI
    87                              <1> %endmacro
    88                              <1> ;;-------------------------------------------------------------------
    89                              <1> 
    90                              <1> 
    91                              <1> ;;-------------------------------------------------------------------
    92                              <1> %macro  GetCh   1
    93                              <1>         push    SI
    94                              <1>         xor     SI,SI
    95                              <1> %ifidni %1,AL
    96                              <1>         ;inc     SI
    97                              <1>         call    proc_GetCh
    98                              <1> %elifidni %1,AH
    99                              <1>         mov     SI,1
   100                              <1>         call    proc_GetCh
   101                              <1> %else
   102                              <1>         push    AX
   103                              <1>         call    proc_GetCh
   104                              <1>         mov     %1,AL
   105                              <1>         pop     AX
   106                              <1> %endif
   107                              <1>         pop     SI
   108                              <1> %endmacro
   109                              <1> ;;-------------------------------------------------------------------
   110                              <1> 
   111                              <1> 
   112                              <1> ;;-------------------------------------------------------------------
   113                              <1> %macro  PutInt  1
   114                              <1>         push    AX
   115                              <1>         mov     AX,%1
   116                              <1>         call    proc_PutInt
   117                              <1>         pop     AX
   118                              <1> %endmacro
   119                              <1> ;;-------------------------------------------------------------------
   120                              <1> 
   121                              <1> 
   122                              <1> ;;-------------------------------------------------------------------
   123                              <1> %macro  GetInt  1
   124                              <1> %ifnidni %1,AX
   125                              <1>         push    AX
   126                              <1>         call    proc_GetInt
   127                              <1>         mov     %1,AX
   128                              <1> 	  pop     AX
   129                              <1> %else 
   130                              <1>         call  proc_GetInt
   131                              <1> %endif
   132                              <1> %endmacro
   133                              <1> ;;-------------------------------------------------------------------
   134                              <1> 
   135                              <1> ;;-------------------------------------------------------------------
   136                              <1> %macro  PutLInt  1
   137                              <1>         push    EAX
   138                              <1>         mov     EAX,%1
   139                              <1>         call    proc_PutLInt
   140                              <1>         pop     EAX
   141                              <1> %endmacro
   142                              <1> ;;-------------------------------------------------------------------
   143                              <1> 
   144                              <1> ;;-------------------------------------------------------------------
   145                              <1> %macro  GetLInt  1
   146                              <1> %ifnidni %1,EAX
   147                              <1>         push    EAX
   148                              <1>         call    proc_GetLInt
   149                              <1>         mov     %1,EAX
   150                              <1> 	  pop     EAX
   151                              <1> %else 
   152                              <1>         call  proc_GetLInt
   153                              <1> %endif
   154                              <1> %endmacro
   155                              <1> ;;-------------------------------------------------------------------
   156                              <1> 
   157                                  	      .DATA
   158                              <1>  segment .data
   159                                  	      MAX_SIZE EQU 25
   160                                  	      %define ARR_LEN dword [n]
   161                                  
   162                                  	      ;; Strings to be printed
   163 00000000 456E7465722073697A-     	      PROMPT_ENTER_ARR_LEN db	"Enter size of your Array : ", 0
   164 00000009 65206F6620796F7572-
   165 00000012 204172726179203A20-
   166 0000001B 00                 
   167 0000001C 506C6561736520656E-     	      PROMPT_ENTER_ELEMENTS db	"Please enter elements of your array : ", 0
   168 00000025 74657220656C656D65-
   169 0000002E 6E7473206F6620796F-
   170 00000037 757220617272617920-
   171 00000040 3A2000             
   172 00000043 4F726967696E616C20-     	      print_orig_array db	"Original Array ", 0
   173 0000004C 41727261792000     
   174 00000053 536F72746564204172-     	      print_final_array	db	"Sorted Array ", 0
   175 0000005C 7261792000         
   176 00000061 2000                    	      print_space db " ",0
   177 00000063 4D6572676520536F72-     	      merge_sort_debug_str db "Merge Sort Params: EAX, ECX: ", 0
   178 0000006C 7420506172616D733A-
   179 00000075 204541582C20454358-
   180 0000007E 3A2000             
   181 00000081 456E64204D65726765-     	      merge_sort_end_debug_str db "End Merge Sort", 0
   182 0000008A 20536F727400       
   183 00000090 4D6572676520506172-     	      merge_debug_str db "Merge Params: EAX, EBX, ECX, EDX, EDI: ", 0
   184 00000099 616D733A204541582C-
   185 000000A2 204542582C20454358-
   186 000000AB 2C204544582C204544-
   187 000000B4 493A2000           
   188 000000B8 436F70792050617261-     	      copy_debug_str db "Copy Params: EAX, EBX, ECX: ", 0
   189 000000C1 6D733A204541582C20-
   190 000000CA 4542582C204543583A-
   191 000000D3 2000               
   192 000000D5 54656D702061727261-     	      temp_array_debug_str db "Temp array: ", 0
   193 000000DE 793A2000           
   194 000000E2 4D6572676520436F70-     	      merge_copy_back_temp_debug_str db "Merge Copy back temp array: ", 0
   195 000000EB 79206261636B207465-
   196 000000F4 6D702061727261793A-
   197 000000FD 2000               
   198                                  	      .UDATA
   199                              <1>  segment .bss
   200                                  	      ;; Length of the array
   201 00000000 <res 00000004>          	      n	    resd 1
   202                                  	      ;; Array to be sorted
   203 00000004 <res 00000064>          	      arr   resd MAX_SIZE
   204                                  	      ;; Temporary storage array
   205 00000068 <res 00000064>          	      temp_arr resd MAX_SIZE
   206                                  	      .CODE
   207                              <1>  segment .data
   208                              <1>  segment .bss
   209                              <1>  segment .text
   210                                  	      .STARTUP
   211                              <1> 
   212                              <1>  global _start
   213                              <1> _start:
   214                                  
   215                                  ;;; --------------------------------------------------
   216                                  READ_ARR_LEN:			    
   217                                  	      ;; Read the length of the array
   218                                  	      PutStr PROMPT_ENTER_ARR_LEN
   219 00000000 51                  <1>  push ECX
   220 00000001 B9[00000000]        <1>  mov ECX,%1
   221 00000006 E8(00000000)        <1>  call proc_PutStr
   222 0000000B 59                  <1>  pop ECX
   223                                  	      nwln
   224 0000000C E8(00000000)        <1>  call proc_nwln
   225                                  	      GetLInt [n]	    ; Size of input array
   226                              <1> %ifnidni %1,EAX
   227 00000011 50                  <1>  push EAX
   228 00000012 E8(00000000)        <1>  call proc_GetLInt
   229 00000017 A3[00000000]        <1>  mov %1,EAX
   230 0000001C 58                  <1>  pop EAX
   231                              <1> %else
   232                              <1>  call proc_GetLInt
   233                              <1> %endif
   234                                  	      PutLInt [n]
   235 0000001D 50                  <1>  push EAX
   236 0000001E A1[00000000]        <1>  mov EAX,%1
   237 00000023 E8(00000000)        <1>  call proc_PutLInt
   238 00000028 58                  <1>  pop EAX
   239                                  	      nwln
   240 00000029 E8(00000000)        <1>  call proc_nwln
   241                                  
   242                                  ;;; --------------------------------------------------
   243                                  GET_ARRAY:
   244                                  	      ;; Get values in arr from the user
   245 0000002E B8[04000000]            	      mov   EAX, arr
   246 00000033 8B0D[00000000]          	      mov   ECX, ARR_LEN
   247 00000039 E83D010000              	      call  Read_Arr
   248                                  
   249                                  	      ;; Print the original array
   250 0000003E 8B0D[00000000]          	      mov   ECX, ARR_LEN
   251                                  	      PutStr print_orig_array
   252 00000044 51                  <1>  push ECX
   253 00000045 B9[43000000]        <1>  mov ECX,%1
   254 0000004A E8(00000000)        <1>  call proc_PutStr
   255 0000004F 59                  <1>  pop ECX
   256 00000050 E86F010000              	      call  Print_Arr
   257                                  
   258                                  	      ;; Run Merge Sort on the array
   259 00000055 B8[04000000]            	      mov   EAX, arr
   260 0000005A BB[68000000]            	      mov   EBX, temp_arr
   261 0000005F 8B0D[00000000]          	      mov   ECX, ARR_LEN
   262 00000065 E81A000000              	      call  Merge_Sort
   263                                  
   264                                  	      ;; Print the final array
   265                                  	      PutStr print_final_array
   266 0000006A 51                  <1>  push ECX
   267 0000006B B9[53000000]        <1>  mov ECX,%1
   268 00000070 E8(00000000)        <1>  call proc_PutStr
   269 00000075 59                  <1>  pop ECX
   270 00000076 E836010000              	      call  Print_Orig_Arr
   271                                  	      .EXIT
   272 0000007B B801000000          <1>  mov EAX,1
   273 00000080 31DB                <1>  xor EBX,EBX
   274 00000082 CD80                <1>  int 0x80
   275                                  
   276                                  ;;; --------------------------------------------------
   277                                  Merge_Sort:
   278                                  	      ;; EAX - Array start
   279                                  	      ;; ECX - array length
   280                                  
   281                                  	      ;; Arrays of size 0 or 1 are already sorted
   282 00000084 81F902000000            	      cmp   ECX, 2
   283 0000008A 7C45                    	      jl    Trivial_Merge_Sort
   284                                  
   285                                  	      ;; Merge_Sort (first half)
   286                                  	      ;; Length of the first half
   287                                  	      ;; ECX /= 2
   288 0000008C 51                      	      push  ECX
   289 0000008D D1E9                    	      shr   ECX, 1
   290 0000008F E8F0FFFFFF              	      call  Merge_Sort
   291 00000094 59                      	      pop   ECX
   292                                  
   293                                  	      ;; Merge_Sort (second half)
   294 00000095 50                      	      push  EAX
   295 00000096 53                      	      push  EBX
   296 00000097 51                      	      push  ECX
   297                                  
   298                                  	      ;; Length of the second half
   299                                  	      ;; ECX = ECX - ECX/2
   300 00000098 89CA                    	      mov   EDX, ECX
   301 0000009A D1EA                    	      shr   EDX, 1
   302 0000009C 29D1                    	      sub   ECX, EDX
   303 0000009E 69D204000000            	      imul  EDX, 4
   304                                  	      ;; Start index of the second half
   305                                  	      ;; EAX = EAX + (ECX/2) * 4
   306 000000A4 01D0                    	      add   EAX, EDX
   307 000000A6 52                      	      push  EDX
   308 000000A7 E8D8FFFFFF              	      call  Merge_Sort
   309 000000AC 5A                      	      pop   EDX
   310                                  
   311 000000AD 59                      	      pop   ECX
   312 000000AE 5B                      	      pop   EBX
   313 000000AF 58                      	      pop   EAX
   314                                  
   315 000000B0 60                      	      pushad
   316                                  	      ;; Merge (first half, second half)
   317                                  	      ;; Length of first half = ECX/2
   318                                  	      ;; Length of second half = ECX - ECX/2
   319 000000B1 89CA                    	      mov   EDX, ECX
   320 000000B3 D1E9                    	      shr   ECX, 1
   321 000000B5 29CA                    	      sub   EDX, ECX
   322                                  
   323                                  	      ;; Start of second half = EAX + (ECX/2) * 4
   324 000000B7 89C3                    	      mov   EBX, EAX
   325 000000B9 89CF                    	      mov   EDI, ECX
   326 000000BB 69FF04000000            	      imul  EDI, 4
   327 000000C1 01FB                    	      add   EBX, EDI
   328                                  	      ;; Index of temp array = 0
   329 000000C3 29FF                    	      sub   EDI, EDI
   330 000000C5 E808000000              	      call  Merge
   331 000000CA 61                      	      popad
   332                                  
   333                                  	      ;; Copy back the merged array from temp_arr to arr
   334 000000CB E853000000              	      call  Merge_Copy_Back_Temp
   335                                  
   336 000000D0 C3                      	      ret
   337                                  
   338                                  ;;; --------------------------------------------------
   339                                  Trivial_Merge_Sort:
   340                                  	      ;; In case of arrays of length 0 or 1
   341 000000D1 C3                      	      ret
   342                                  	      
   343                                  ;;; --------------------------------------------------
   344                                  Merge:
   345                                  	      ;; Merge two arrays contents.
   346                                  	      ;; The final merged array will be in temp_arr
   347                                  	      ;; Merging is done recursively.
   348                                  
   349                                  	      ;; Arguments:
   350                                  	      ;; EAX - First array's start
   351                                  	      ;; EBX - Second array's start
   352                                  	      ;; ECX - Length of first array
   353                                  	      ;; EDX - Length of second array
   354                                  	      ;; EDI - Index in temp array
   355 000000D2 60                      	      pushad
   356                                  
   357                                  	      ;; Handle the cases where one array is empty
   358 000000D3 81F900000000            	      cmp   ECX, 0
   359 000000D9 7459                    	      jz    First_Array_Over
   360 000000DB 81FA00000000            	      cmp   EDX, 0
   361 000000E1 746B                    	      jz    Second_Array_Over
   362                                  
   363                                  	      ;; Compare first elements of both the arrays
   364 000000E3 52                      	      push  EDX
   365 000000E4 57                      	      push  EDI
   366 000000E5 8B10                    	      mov   EDX, [EAX]
   367 000000E7 8B3B                    	      mov   EDI, [EBX]
   368 000000E9 39FA                    	      cmp   EDX, EDI
   369 000000EB 5F                      	      pop   EDI
   370 000000EC 5A                      	      pop   EDX
   371                                  
   372                                  	      ;; Pick which ever is the least and update that array
   373 000000ED 7C05                    	      jl    Update_First_Array
   374 000000EF E917000000              	      jmp   Update_Second_Array
   375                                  
   376                                  ;;; --------------------------------------------------
   377                                  Update_First_Array:
   378                                  	      ;; min_elem = min (first elements of first array and second array)
   379                                  	      ;; Put min_elem into the temp array
   380 000000F4 FF30                    	      push  dword [EAX]
   381 000000F6 8F04BD[68000000]        	      pop   dword [temp_arr + EDI * 4]
   382 000000FD 0504000000              	      add   EAX, 4
   383 00000102 49                      	      dec   ECX
   384 00000103 47                      	      inc   EDI
   385                                  
   386                                  	      ;; Recursively call Merge on the updated array and the
   387                                  	      ;; other array
   388 00000104 E8C9FFFFFF              	      call  Merge
   389 00000109 61                      	      popad
   390 0000010A C3                      	      ret
   391                                  
   392                                  ;;; --------------------------------------------------
   393                                  Update_Second_Array:
   394                                  	      ;; min_elem = min (first elements of first array and second array)
   395                                  	      ;; Put min_elem into the temp array
   396 0000010B FF33                    	      push  dword [EBX]
   397 0000010D 8F04BD[68000000]        	      pop   dword [temp_arr + EDI * 4]
   398 00000114 81C304000000            	      add   EBX, 4
   399 0000011A 4A                      	      dec   EDX
   400 0000011B 47                      	      inc   EDI
   401                                  
   402                                  	      ;; Recursively call Merge on the updated array and the
   403                                  	      ;; other array
   404 0000011C E8B1FFFFFF              	      call  Merge
   405 00000121 61                      	      popad
   406 00000122 C3                      	      ret
   407                                  
   408                                  ;;; --------------------------------------
   409                                  Merge_Copy_Back_Temp:
   410                                  	      ;; Copy back the temp array into original array
   411                                  	      ;; Arguments:
   412                                  	      ;; EAX - original array address
   413                                  	      ;; ECX - original array length
   414 00000123 60                      	      pushad
   415                                  
   416                                  	      ;; For copying back, the destination array is EAX
   417 00000124 89C3                    	      mov   EBX, EAX
   418                                  	      ;; Now, the source array is temp_arr
   419 00000126 B8[68000000]            	      mov   EAX, temp_arr
   420 0000012B E834000000              	      call  Copy_Array
   421 00000130 61                      	      popad
   422 00000131 C3                      	      ret
   423                                  
   424                                  ;;; --------------------------------------------------
   425                                  Trivial_Merge:
   426                                  	      ;; Note: One array is empty means no need to merge.
   427 00000132 61                      	      popad
   428 00000133 C3                      	      ret
   429                                  
   430                                  ;;; --------------------------------------------------
   431                                  First_Array_Over:
   432                                  	      ;; Copy the rest of the second array to the temp arr
   433                                  	      ;; because the first array is empty
   434 00000134 60                      	      pushad
   435 00000135 89D8                    	      mov   EAX, EBX
   436 00000137 89D1                    	      mov   ECX, EDX
   437 00000139 BB[68000000]            	      mov   EBX, temp_arr
   438 0000013E 69FF04000000            	      imul  EDI, 4
   439 00000144 01FB                    	      add   EBX, EDI
   440 00000146 E819000000              	      call  Copy_Array
   441 0000014B 61                      	      popad
   442 0000014C 61                      	      popad
   443 0000014D C3                      	      ret
   444                                  
   445                                  ;;; --------------------------------------------------
   446                                  Second_Array_Over:
   447                                  	      ;; Copy the rest of the first array to the temp arr
   448                                  	      ;; because the second array is empty
   449 0000014E 60                      	      pushad
   450 0000014F BB[68000000]            	      mov   EBX, temp_arr
   451 00000154 69FF04000000            	      imul  EDI, 4
   452 0000015A 01FB                    	      add   EBX, EDI
   453 0000015C E803000000              	      call  Copy_Array
   454 00000161 61                      	      popad
   455 00000162 61                      	      popad
   456 00000163 C3                      	      ret
   457                                  
   458                                  ;;; --------------------------------------------------
   459                                  Copy_Array:
   460                                  	      ;; Copy array to destination array
   461                                  	      ;; EAX - Array start
   462                                  	      ;; EBX - Destination array
   463                                  	      ;; ECX - Array length
   464                                  
   465                                  	      ;; Trivial case
   466 00000164 81F900000000            	      cmp   ECX, 0
   467 0000016A 740E                    	      jz    Copy_Empty_Array
   468                                  
   469 0000016C 51                      	      push  ECX
   470 0000016D 29FF                    	      sub   EDI, EDI
   471                                  copy_loop:
   472                                  	      ;; Copy each element
   473 0000016F FF34B8                  	      push  dword [EAX + EDI * 4]
   474 00000172 8F04BB                  	      pop   dword [EBX + EDI * 4]
   475 00000175 47                      	      inc   EDI
   476 00000176 E2F7                    	      loop  copy_loop
   477                                  
   478 00000178 59                      	      pop   ECX
   479 00000179 C3                      	      ret
   480                                  
   481                                  Copy_Empty_Array:
   482 0000017A C3                      	      ret
   483                                  
   484                                  ;;; --------------------------------------------------
   485                                  Read_Arr:
   486                                  	      ;; EAX - array start
   487                                  	      ;; ECX - array length
   488                                  	      PutStr PROMPT_ENTER_ELEMENTS
   489 0000017B 51                  <1>  push ECX
   490 0000017C B9[1C000000]        <1>  mov ECX,%1
   491 00000181 E8(00000000)        <1>  call proc_PutStr
   492 00000186 59                  <1>  pop ECX
   493                                  	      nwln
   494 00000187 E8(00000000)        <1>  call proc_nwln
   495 0000018C 89C6                    	      mov   ESI, EAX
   496 0000018E 29FF                    	      sub   EDI, EDI
   497                                  loop1:
   498                                  	      ;; Read each element
   499                                  	      GetLInt [ESI + EDI * 4]
   500                              <1> %ifnidni %1,EAX
   501 00000190 50                  <1>  push EAX
   502 00000191 E8(00000000)        <1>  call proc_GetLInt
   503 00000196 8904BE              <1>  mov %1,EAX
   504 00000199 58                  <1>  pop EAX
   505                              <1> %else
   506                              <1>  call proc_GetLInt
   507                              <1> %endif
   508 0000019A 47                      	      inc   EDI
   509 0000019B E2F3                    	      loop  loop1
   510 0000019D C3                      	      ret
   511                                  
   512                                  ;;; --------------------------------------------------
   513                                  Print_Temp_Arr:
   514                                  	      ;; Print contents of temp_arr (for debugging)
   515 0000019E 60                      	      pushad
   516 0000019F B8[68000000]            	      mov EAX, temp_arr
   517 000001A4 8B0D[00000000]          	      mov ECX, ARR_LEN
   518 000001AA E815000000              	      call Print_Arr
   519 000001AF 61                      	      popad
   520 000001B0 C3                      	      ret
   521                                  
   522                                  ;;; --------------------------------------------------
   523                                  Print_Orig_Arr:
   524                                  	      ;; Print contents of arr (for debugging)
   525 000001B1 60                      	      pushad
   526 000001B2 B8[04000000]            	      mov EAX, arr
   527 000001B7 8B0D[00000000]          	      mov ECX, ARR_LEN
   528 000001BD E802000000              	      call Print_Arr
   529 000001C2 61                      	      popad
   530 000001C3 C3                      	      ret
   531                                  
   532                                  ;;; --------------------------------------------------
   533                                  Print_Arr:
   534                                  	      ;; Print contents of an array
   535                                  	      ;; EAX - Array start
   536                                  	      ;; ECX - array length
   537                                  	      nwln
   538 000001C4 E8(00000000)        <1>  call proc_nwln
   539 000001C9 89C6                    	      mov   ESI, EAX
   540 000001CB 29FF                    	      sub   EDI, EDI
   541                                  new_loop1:
   542                                  	      PutLInt [ESI + EDI * 4]
   543 000001CD 50                  <1>  push EAX
   544 000001CE 8B04BE              <1>  mov EAX,%1
   545 000001D1 E8(00000000)        <1>  call proc_PutLInt
   546 000001D6 58                  <1>  pop EAX
   547                                  	      PutStr print_space
   548 000001D7 51                  <1>  push ECX
   549 000001D8 B9[61000000]        <1>  mov ECX,%1
   550 000001DD E8(00000000)        <1>  call proc_PutStr
   551 000001E2 59                  <1>  pop ECX
   552 000001E3 47                      	      inc   EDI
   553 000001E4 E2E7                    	      loop  new_loop1
   554                                  	      nwln
   555 000001E6 E8(00000000)        <1>  call proc_nwln
   556 000001EB C3                      	      ret
